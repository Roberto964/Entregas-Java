package Entrega2;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class EstadisticasClientes {

	// Versión funcional
	public static Map<Cliente, List<Compra>> agruparComprasPorClienteFuncional(List<Compra> compras) {
		return compras.stream().collect(Collectors.groupingBy(Compra::getCliente));
	}

	// Versión imperativa
	public static Map<Cliente, List<Compra>> agruparComprasPorClienteImperativa(List<Compra> compras) {
		Map<Cliente, List<Compra>> mapa = new HashMap<>();
		for (Compra c : compras) {
			Cliente cli = c.getCliente();
			if (!mapa.containsKey(cli)) {
				mapa.put(cli, new ArrayList<>());
			}
			mapa.get(cli).add(c);
		}
		return mapa;
	}

	public static void main(String[] args) {

		// Crear clientes
		Cliente ana = Cliente.of("Ana", 5);
		Cliente juan = Cliente.of("Juan", 2);
		Cliente luis = Cliente.of("Luis", 7);

		// Crear compras
		Compra c1 = Compra.of(ana, "Agenda personalizada", 25.5);
		Compra c2 = Compra.of(juan, "Camiseta estampada", 60.0);
		Compra c3 = Compra.of(ana, "Taza con foto", 15.0);
		Compra c4 = Compra.of(luis, "Poster gigante", 80.0);

		// Lista de compras
		List<Compra> compras = Arrays.asList(c1, c2, c3, c4);

		// Agrupación funcional
		Map<Cliente, List<Compra>> resultadoFuncional = agruparComprasPorClienteFuncional(compras);
		System.out.println("Agrupación funcional:");
		resultadoFuncional.forEach((cliente, listaCompras) -> {
			System.out.println(cliente.getNombre() + ": " + listaCompras);
		});

		// Agrupación imperativa
		Map<Cliente, List<Compra>> resultadoImperativa = agruparComprasPorClienteImperativa(compras);
		System.out.println("\nAgrupación imperativa:");
		resultadoImperativa.forEach((cliente, listaCompras) -> {
			System.out.println(cliente.getNombre() + ": " + listaCompras);
		});
	}
}
