package entrega4;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import ClasePrimero.src.us.lsi.tools.File2;

public class Defensa1 {
	// Dado un n√∫mero entero n, implemente una funci√≥n productoImpares que calcule
	// el producto de
	// los primeros n n√∫meros impares. No olvide validar que el par√°metro n es
	// positivo y que n > 0
	public static Double productoImpares(Integer n) {
		if (n < 0) {
			throw new IllegalArgumentException("El numero debe ser mayor que 0");
		}
		Double producto = 1.;
		Integer numeroImpar = 1;
		for (int i = 0; i < n; i++) {
			producto *= numeroImpar;
			numeroImpar += 2;
		}

		return producto;
	}

	/*
	 * Dise√±e una funci√≥n sumaGeometricaAlternada que calcule la suma de los
	 * primeros k t√©rminos de una secuencia geom√©trica donde cada t√©rmino sigue la
	 * regla: ùëéùëõ = (‚àí1)ùëõ ¬∑ ùëé1 ¬∑ ùëü(ùëõ‚àí1) La funci√≥n recibir√° como par√°metros de
	 * entrada: ‚Ä¢ Double ùëé1: El primer t√©rmino de la secuencia. ‚Ä¢ Double ùëü: La
	 * raz√≥n de la progresi√≥n geom√©trica. ‚Ä¢ int ùëò: Cantidad de t√©rminos a sumar. No
	 * olvide las siguientes validaciones: ‚Ä¢ ùëò debe ser mayor que 0 ‚Üí Si ùëò ‚â§ 0,
	 * lanzar IllegalArgumentException("ùëò debe ser mayor que 0"). ‚Ä¢ ùëé1 y ùëü deben
	 * ser positivos
	 */
	public static Double sumaGeometricaAlternada(Double a1, Double r, Integer k) {
		if (k <= 0) {
			throw new IllegalArgumentException("El numero debe ser mayor que 0");
		}
		if (r <= 0 || a1 <= 0) {
			throw new IllegalArgumentException("a1 y r deben ser positivo");
		}
		Double suma = 0.;
		for (Integer n = 1; n <= k; n++) {
			Double termino = Math.pow(-1, n) * a1 * Math.pow(r, n - 1);
			suma += termino;
		}
		return suma;

	}

	/*
	 * Implemente una funci√≥n combinatorioSinMultiplosDeTres que calcule el n√∫mero
	 * combinatorio (n¬¶k) sin considerar aquellos valores donde el numerador o
	 * denominador sea m√∫ltiplo de 3. No olvide validar que ùëõ ‚â• ùëò y que ambos sean
	 * positivos
	 */
	public static Double combinatorioSinMultiplosDeTres(Integer n, Integer k) {
		if (n <= k) {
			throw new IllegalArgumentException("El n debe ser mayor que k ");
		}
		if (n < 0 || k < 0) {
			throw new IllegalArgumentException("El n y k deben ser positivos");
		}
		Double numerador = 1.;
		for (Integer i = n; i > n - k; i--) {
			if (i % 3 != 0) {
				numerador *= i;
			}
		}
		Double denominador = 1.;
		for (Integer i = k; i > 0; i--) {
			if (i % 3 != 0) {
				denominador *= i;
			}
		}
		return numerador / denominador;
	}

	/*
	 * Dado un archivo de texto fichero.txt, implemente una funci√≥n
	 * filtrarLineasConsecutivas que devuelva todas las l√≠neas donde aparezcan al
	 * menos dos palabras consecutivas de una lista dada. La funci√≥n debe recibir el
	 * nombre del archivo y una lista de palabras clave. Controle que la lectura del
	 * archivo de texto ha sido correcta, usando try/catch.
	 */
	public static String filtrarLineasConsecutivas(String Fichero, String string) throws IOException {
		List<String> resultado = new ArrayList<>();
		List<String> lineas;

		lineas = File2.lineasDeFichero(Fichero);

		for (String linea : lineas) {

			String[] palabras = linea.split("\\s+");
			for (int i = 0; i < palabras.length - 1; i++) {
				String palabraActual = palabras[i].replaceAll("\\W", "");
				String palabraSiguiente = palabras[i + 1].replaceAll("\\W", "");

				if (string.contains(palabraActual) && string.contains(palabraSiguiente)) {
					resultado.add(linea);
					break;
				}
			}
		}

		return String.join("\n", resultado);
	}

	public static void main(String[] args) {
		try {

			System.out.println("Resultado productoImpares(8): " + productoImpares(8));
			System.out.println("Resultado sumaGeometricaAlternada(2., 3., 5): " + sumaGeometricaAlternada(2., 3., 5));
			System.out
					.println("Resultado combinatorioSinMultiplosDeTres(5, 3): " + combinatorioSinMultiplosDeTres(5, 3));

		} catch (IllegalArgumentException e) {
			System.out.println("Error en los par√°metros: " + e.getMessage());
		} catch (ArithmeticException e) {
			System.out.println("Error aritm√©tico: " + e.getMessage());
		} catch (Exception e) {
			System.out.println("Error inesperado: " + e.getMessage());
		}
		try {
			System.out.println(filtrarLineasConsecutivas(
					"C:\\Users\\rober\\eclipse-workspace-Java\\Entrega_de_Java\\resources\\lin_quijote.txt",
					"Quijote"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		/*
		 * Lectura del  Quijote y archivo_palabras
		 * 
		 */
		try {
			System.out.println(filtrarLineasConsecutivas(
					"C:\\Users\\rober\\eclipse-workspace-Java\\Entrega_de_Java\\resources\\archivo_palabras.txt",
					"salud"));
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

}
