package Entrega2;

import java.util.Comparator;

public class ListaOrdenadaSinRepeticion<E> extends ListaOrdenada<E> {
	public ListaOrdenadaSinRepeticion(Comparator<E> comparator) {
		super(comparator);
	}

	public static <E> ListaOrdenadaSinRepeticion<E> of(Comparator<E> comparator) {
		return new ListaOrdenadaSinRepeticion<E>(comparator);
	}

	@Override
	public void add(E e) {
		for (E item : elements()) {
			if (comparator.compare(item, e) == 0) {
				return;
			}
		}
		super.add(e);
	}

	public static void main(String[] args) {
		Comparator<Integer> comparator = Integer::compareTo;

		// Crear una lista sin repetición
		ListaOrdenadaSinRepeticion<Integer> lista = ListaOrdenadaSinRepeticion.of(comparator);

		// Añadir elementos, incluyendo duplicados
		System.out.println("Añadiendo elementos: 5, 2, 8, 1, 3, 5, 2");
		lista.add(5);
		lista.add(2);
		lista.add(8);
		lista.add(1);
		lista.add(3);
		lista.add(5); // Duplicado
		lista.add(2); // Duplicado

		// Mostrar elementos de la lista después de añadir
		System.out.println("Elementos en la lista: " + lista);
		System.out.println("Tamaño de la lista: " + lista.size());

		// Verificar que haya 5 elementos únicos ordenados
		System.out.println("Se esperan 5 elementos únicos ordenados");

		// Eliminar el primer elemento
		System.out.println("\nEliminando el primer elemento: ");
		lista.remove();

		// Mostrar los elementos después de eliminar
		System.out.println("Elementos después de eliminar: " + lista);

		// Añadir elementos en lote
		System.out.println("\nAñadiendo elementos en lote: 4, 6, 7, 4");
		lista.add(4);
		lista.add(6);
		lista.add(7);
		lista.add(4); // Duplicado

		// Mostrar los elementos después de añadir en lote
		System.out.println("Elementos después de añadir lote: " + lista);

		// Verificar que el 4 aparezca solo una vez
		System.out.println("Se espera que el 4 aparezca solo una vez");
	}

}
